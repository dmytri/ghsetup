#!/bin/bash

#
# SETUP
#

BASHER_ROOT="$PWD/basher"
BASHER_PREFIX="$BASHER_ROOT/cellar"
BASHER_PACKAGES_PATH="$BASHER_PREFIX/packages"

BASHERPM="$PWD/basher/bin/basher"
eval "$($BASHERPM init - bash)"

usage () {
  echo
  echo "clone [options]"
  echo
  echo "Options:"
  echo "  -r|--repo      set target repo and clone"
  echo "  -s|--setup     do setup steps only and exit"
  echo "  -c|--cleanup   clean up dependencies and exit"
  echo "  -h|--help      show this help and exit"
}
error () {
  >&2 echo "$(tput setaf 1)Error: $*}"
  exit 1
}

clean () {
  local packages
  mapfile -t packages < <($BASHERPM list)

  echo packages to uninstall: ${#packages[@]}
  echo ${packages[@]}

  for p in "${packages[@]}"; do
    $BASHERPM uninstall $p
  done
}

$BASHERPM install dmytri/jp >/dev/null
$BASHERPM install dmytri/simple_opts.sh >/dev/null
source $BASHER_PACKAGES_PATH/dmytri/simple_opts.sh/lib/simple_opts.sh

opt --repo= -r
opt --clean -c
opt --setup -s
opt --help -h
opt_parse $@

if [ -n "$help" ]; then
  usage
  exit 0
fi

if [ -n "$clean" ]; then
  clean
  exit 0
fi

declare GH
hash gh 2>/dev/null && GH=gh || GH="${HOME}/gh/bin/gh"
if ! type $GH 2>/dev/null 1>/dev/null; then
  error "gh should be in PATH or at ~/gh/bin/gh | https://github.com/cli/cli"
fi

GITHUB_TOKEN=$($GH auth token)
if [ -z "$GITHUB_TOKEN" ]; then
  $GH auth login -w -p https
  GITHUB_TOKEN=$($GH auth token)
fi

if [ -n "$setup" ]; then
  exit 0
fi

if [ -z "$repo" ]; then
  echo "--repo is required"
  usage
  exit 1
fi

#
# copy github project (classic)
#


TARGET_REPO=Garden-Delivery/"${repo}"

SOURCE_PROJECT_ID=14544235
TARGET_PROJECT_ID=$($GH api \
  -H "Accept: application/vnd.github+json" \
  /repos/"${TARGET_REPO}"/projects \
  | jp .h '"id"' .keyval)

if [ -z "$TARGET_PROJECT_ID" ]; then
  echo ${TARGET_REPO} must exist and have project columns copied into it
  exit 1
fi

mapfile -t targetColumnIds <  <($GH api \
  -H "Accept: application/vnd.github.inertia-preview+json" \
  https://api.github.com/projects/${TARGET_PROJECT_ID}/columns \
  | jp [] .swap .map .cons \
  | jp .map .do '"id"' .keyval .done)

#echo "Target project column ids:"; printf '%s\n' "${targetColumnIds[@]}"

mapfile -t sourceColumnIds < <($GH api \
  -H "Accept: application/vnd.github.inertia-preview+json" \
  https://api.github.com/projects/${SOURCE_PROJECT_ID}/columns \
  | jp [] .swap .map .cons \
  | jp .map .do '"id"' .keyval .done)

#echo "Source project column ids:"; printf '%s\n' "${sourceColumnIds[@]}"
  
if [ "${#sourceColumnIds[@]}" -ne "${#targetColumnIds[@]}" ]; then
    echo "Different number of columns in between projects"
    exit 1
fi
    
echo "cloning to $TARGET_REPO ..."
for sourceColumnIndex in "${!sourceColumnIds[@]}"
do
    sourceColumnId=${sourceColumnIds[$sourceColumnIndex]}
    sourceColumnId=${sourceColumnId//[^a-zA-Z0-9_]/}
    targetColumnId=${targetColumnIds[$sourceColumnIndex]}
    targetColumnId=${targetColumnId//[^a-zA-Z0-9_]/}
    $GH api \
      -H "Accept: application/vnd.github.inertia-preview+json" \
      https://api.github.com/projects/columns/"${sourceColumnId}"/cards \
    | jp .map .do '"note"' .is_str .if .do .keyval .done .else .pop .done \
    | while read -r note; do
      data='{"note":'${note}'}'
      curl \
        -w 'HTTP Status: %{http_code}' --silent --output /dev/null \
        -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Accept: application/vnd.github.inertia-preview+json" \
        -d "${data}" \
        https://api.github.com/projects/columns/"${targetColumnId}"/cards \
        >/dev/null
    done
done
echo "done"

#
# end
#
